<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>API Interactivo</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f2f2f2;
      }
      .container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      h2 {
        margin-bottom: 20px;
      }
      label {
        font-weight: bold;
      }
      input[type="text"],
      input[type="number"] {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }
      button {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      button:hover {
        background-color: #0056b3;
      }
      .response {
        margin-top: 20px;
        padding: 10px;
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h2>Interfaz para interactuar con la API</h2>
      <label for="route">Ruta:</label>
      <input type="text" id="route" placeholder="Escribe la ruta de la API" required />
      <label for="method">Método:</label>
      <select id="method">
        <option value="GET">GET</option>
        <option value="POST">POST</option>
        <option value="PUT">PUT</option>
        <option value="DELETE">DELETE</option>
      </select>
      <label for="data">Datos:</label>
      <textarea id="data" placeholder="Escribe los datos para el método POST o PUT"></textarea>
      <button onclick="makeRequest()">Enviar</button>
      <div class="response" id="response"></div>
    </div>

    <script>
      function formatResponse(responseData) {
        let formattedResponse = "<ul>";
        for (const key in responseData) {
          if (responseData.hasOwnProperty(key)) {
            const value = responseData[key];
            formattedResponse += `<li><strong>${key}:</strong> `;
            if (typeof value === "object" && value !== null) {
              // Si el valor es un objeto, llamamos a formatResponse recursivamente
              formattedResponse += formatResponse(value);
            } else {
              // Si el valor no es un objeto, lo añadimos directamente
              formattedResponse += `${value}`;
            }
            formattedResponse += `</li>`;
          }
        }
        formattedResponse += "</ul>";
        return formattedResponse;
      }

      async function makeRequest() {
        const route = document.getElementById("route").value;
        const method = document.getElementById("method").value;
        const data = document.getElementById("data").value;

        try {
          let response;
          if (method === "GET") {
            response = await fetch(route);
          } else {
            response = await fetch(route, {
              method: method,
              headers: {
                "Content-Type": "application/json",
              },
              body: data,
            });
          }
          const responseData = await response.json();
          document.getElementById("response").innerHTML = formatResponse(responseData);
        } catch (error) {
          document.getElementById("response").innerHTML = "Error: " + error.message;
        }
      }
    </script>
  </body>
</html>
